// Mocks generated by Mockito 5.4.6 from annotations
// in cat_tinder/test/cat_presenter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cat_tinder/src/model/cat.dart' as _i2;
import 'package:cat_tinder/src/service/cat_service.dart' as _i4;
import 'package:cat_tinder/src/service/local_storage.dart' as _i6;
import 'package:cat_tinder/src/view/cat_view.dart' as _i3;
import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCat_0 extends _i1.SmartFake implements _i2.Cat {
  _FakeCat_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CatView].
///
/// See the documentation for Mockito's code generation for more information.
class MockCatView extends _i1.Mock implements _i3.CatView {
  MockCatView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void updateCat(_i2.Cat? cat) => super.noSuchMethod(
    Invocation.method(#updateCat, [cat]),
    returnValueForMissingStub: null,
  );

  @override
  void updateLikes(int? likes) => super.noSuchMethod(
    Invocation.method(#updateLikes, [likes]),
    returnValueForMissingStub: null,
  );

  @override
  void showNetworkStatus(bool? isConnected) => super.noSuchMethod(
    Invocation.method(#showNetworkStatus, [isConnected]),
    returnValueForMissingStub: null,
  );

  @override
  void showError(String? message) => super.noSuchMethod(
    Invocation.method(#showError, [message]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CatService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCatService extends _i1.Mock implements _i4.CatService {
  MockCatService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Cat> fetchRandomCat() =>
      (super.noSuchMethod(
            Invocation.method(#fetchRandomCat, []),
            returnValue: _i5.Future<_i2.Cat>.value(
              _FakeCat_0(this, Invocation.method(#fetchRandomCat, [])),
            ),
          )
          as _i5.Future<_i2.Cat>);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i6.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> saveLikes(int? likes) =>
      (super.noSuchMethod(
            Invocation.method(#saveLikes, [likes]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int> getLikes() =>
      (super.noSuchMethod(
            Invocation.method(#getLikes, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.Cat>> getLikedCats() =>
      (super.noSuchMethod(
            Invocation.method(#getLikedCats, []),
            returnValue: _i5.Future<List<_i2.Cat>>.value(<_i2.Cat>[]),
          )
          as _i5.Future<List<_i2.Cat>>);

  @override
  _i5.Future<void> saveCat(_i2.Cat? cat, {bool? liked = false}) =>
      (super.noSuchMethod(
            Invocation.method(#saveCat, [cat], {#liked: liked}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Cat>> getSavedCats() =>
      (super.noSuchMethod(
            Invocation.method(#getSavedCats, []),
            returnValue: _i5.Future<List<_i2.Cat>>.value(<_i2.Cat>[]),
          )
          as _i5.Future<List<_i2.Cat>>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i7.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i8.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onConnectivityChanged),
            returnValue: _i5.Stream<_i8.ConnectivityResult>.empty(),
          )
          as _i5.Stream<_i8.ConnectivityResult>);

  @override
  _i5.Future<_i8.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i5.Future<_i8.ConnectivityResult>.value(
              _i8.ConnectivityResult.bluetooth,
            ),
          )
          as _i5.Future<_i8.ConnectivityResult>);
}
